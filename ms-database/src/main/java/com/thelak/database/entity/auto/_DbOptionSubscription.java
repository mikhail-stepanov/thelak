package com.thelak.database.entity.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.thelak.database.entity.DbOptions;
import com.thelak.database.entity.DbSubscription;

/**
 * Class _DbOptionSubscription was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DbOptionSubscription extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<DbOptions> OPSUB_TO_OPTIONS = Property.create("opsubToOptions", DbOptions.class);
    public static final Property<DbSubscription> OPSUB_TO_SUBSCRIPTION = Property.create("opsubToSubscription", DbSubscription.class);


    protected Object opsubToOptions;
    protected Object opsubToSubscription;

    public void setOpsubToOptions(DbOptions opsubToOptions) {
        setToOneTarget("opsubToOptions", opsubToOptions, true);
    }

    public DbOptions getOpsubToOptions() {
        return (DbOptions)readProperty("opsubToOptions");
    }

    public void setOpsubToSubscription(DbSubscription opsubToSubscription) {
        setToOneTarget("opsubToSubscription", opsubToSubscription, true);
    }

    public DbSubscription getOpsubToSubscription() {
        return (DbSubscription)readProperty("opsubToSubscription");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "opsubToOptions":
                return this.opsubToOptions;
            case "opsubToSubscription":
                return this.opsubToSubscription;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "opsubToOptions":
                this.opsubToOptions = val;
                break;
            case "opsubToSubscription":
                this.opsubToSubscription = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.opsubToOptions);
        out.writeObject(this.opsubToSubscription);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.opsubToOptions = in.readObject();
        this.opsubToSubscription = in.readObject();
    }

}
