package com.thelak.database.entity.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.thelak.database.entity.DbOptionSubscription;
import com.thelak.database.entity.DbPaymentsCryptogramm;
import com.thelak.database.entity.DbPaymentsRecurrent;

/**
 * Class _DbSubscription was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DbSubscription extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> COVER = Property.create("cover", Integer.class);
    public static final Property<LocalDateTime> CREATED_DATE = Property.create("createdDate", LocalDateTime.class);
    public static final Property<Integer> DAYS = Property.create("days", Integer.class);
    public static final Property<LocalDateTime> DELETED_DATE = Property.create("deletedDate", LocalDateTime.class);
    public static final Property<LocalDateTime> MODIFIED_DATE = Property.create("modifiedDate", LocalDateTime.class);
    public static final Property<Integer> MONTHS = Property.create("months", Integer.class);
    public static final Property<String> NEXT = Property.create("next", String.class);
    public static final Property<String> PRE = Property.create("pre", String.class);
    public static final Property<Integer> PRICE = Property.create("price", Integer.class);
    public static final Property<String> TYPE = Property.create("type", String.class);
    public static final Property<List<DbPaymentsCryptogramm>> SUBSCRIPTION_TO_CRYPTOGRAMM = Property.create("subscriptionToCryptogramm", List.class);
    public static final Property<List<DbOptionSubscription>> SUBSCRIPTION_TO_OPSUB = Property.create("subscriptionToOpsub", List.class);
    public static final Property<List<DbPaymentsRecurrent>> SUBSCRIPTION_TO_RECURRENT = Property.create("subscriptionToRecurrent", List.class);

    protected Integer cover;
    protected LocalDateTime createdDate;
    protected Integer days;
    protected LocalDateTime deletedDate;
    protected LocalDateTime modifiedDate;
    protected Integer months;
    protected String next;
    protected String pre;
    protected int price;
    protected String type;

    protected Object subscriptionToCryptogramm;
    protected Object subscriptionToOpsub;
    protected Object subscriptionToRecurrent;

    public void setCover(int cover) {
        beforePropertyWrite("cover", this.cover, cover);
        this.cover = cover;
    }

    public int getCover() {
        beforePropertyRead("cover");
        if(this.cover == null) {
            return 0;
        }
        return this.cover;
    }

    public void setCreatedDate(LocalDateTime createdDate) {
        beforePropertyWrite("createdDate", this.createdDate, createdDate);
        this.createdDate = createdDate;
    }

    public LocalDateTime getCreatedDate() {
        beforePropertyRead("createdDate");
        return this.createdDate;
    }

    public void setDays(int days) {
        beforePropertyWrite("days", this.days, days);
        this.days = days;
    }

    public int getDays() {
        beforePropertyRead("days");
        if(this.days == null) {
            return 0;
        }
        return this.days;
    }

    public void setDeletedDate(LocalDateTime deletedDate) {
        beforePropertyWrite("deletedDate", this.deletedDate, deletedDate);
        this.deletedDate = deletedDate;
    }

    public LocalDateTime getDeletedDate() {
        beforePropertyRead("deletedDate");
        return this.deletedDate;
    }

    public void setModifiedDate(LocalDateTime modifiedDate) {
        beforePropertyWrite("modifiedDate", this.modifiedDate, modifiedDate);
        this.modifiedDate = modifiedDate;
    }

    public LocalDateTime getModifiedDate() {
        beforePropertyRead("modifiedDate");
        return this.modifiedDate;
    }

    public void setMonths(int months) {
        beforePropertyWrite("months", this.months, months);
        this.months = months;
    }

    public int getMonths() {
        beforePropertyRead("months");
        if(this.months == null) {
            return 0;
        }
        return this.months;
    }

    public void setNext(String next) {
        beforePropertyWrite("next", this.next, next);
        this.next = next;
    }

    public String getNext() {
        beforePropertyRead("next");
        return this.next;
    }

    public void setPre(String pre) {
        beforePropertyWrite("pre", this.pre, pre);
        this.pre = pre;
    }

    public String getPre() {
        beforePropertyRead("pre");
        return this.pre;
    }

    public void setPrice(int price) {
        beforePropertyWrite("price", this.price, price);
        this.price = price;
    }

    public int getPrice() {
        beforePropertyRead("price");
        return this.price;
    }

    public void setType(String type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public String getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void addToSubscriptionToCryptogramm(DbPaymentsCryptogramm obj) {
        addToManyTarget("subscriptionToCryptogramm", obj, true);
    }

    public void removeFromSubscriptionToCryptogramm(DbPaymentsCryptogramm obj) {
        removeToManyTarget("subscriptionToCryptogramm", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DbPaymentsCryptogramm> getSubscriptionToCryptogramm() {
        return (List<DbPaymentsCryptogramm>)readProperty("subscriptionToCryptogramm");
    }

    public void addToSubscriptionToOpsub(DbOptionSubscription obj) {
        addToManyTarget("subscriptionToOpsub", obj, true);
    }

    public void removeFromSubscriptionToOpsub(DbOptionSubscription obj) {
        removeToManyTarget("subscriptionToOpsub", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DbOptionSubscription> getSubscriptionToOpsub() {
        return (List<DbOptionSubscription>)readProperty("subscriptionToOpsub");
    }

    public void addToSubscriptionToRecurrent(DbPaymentsRecurrent obj) {
        addToManyTarget("subscriptionToRecurrent", obj, true);
    }

    public void removeFromSubscriptionToRecurrent(DbPaymentsRecurrent obj) {
        removeToManyTarget("subscriptionToRecurrent", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DbPaymentsRecurrent> getSubscriptionToRecurrent() {
        return (List<DbPaymentsRecurrent>)readProperty("subscriptionToRecurrent");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cover":
                return this.cover;
            case "createdDate":
                return this.createdDate;
            case "days":
                return this.days;
            case "deletedDate":
                return this.deletedDate;
            case "modifiedDate":
                return this.modifiedDate;
            case "months":
                return this.months;
            case "next":
                return this.next;
            case "pre":
                return this.pre;
            case "price":
                return this.price;
            case "type":
                return this.type;
            case "subscriptionToCryptogramm":
                return this.subscriptionToCryptogramm;
            case "subscriptionToOpsub":
                return this.subscriptionToOpsub;
            case "subscriptionToRecurrent":
                return this.subscriptionToRecurrent;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cover":
                this.cover = (Integer)val;
                break;
            case "createdDate":
                this.createdDate = (LocalDateTime)val;
                break;
            case "days":
                this.days = (Integer)val;
                break;
            case "deletedDate":
                this.deletedDate = (LocalDateTime)val;
                break;
            case "modifiedDate":
                this.modifiedDate = (LocalDateTime)val;
                break;
            case "months":
                this.months = (Integer)val;
                break;
            case "next":
                this.next = (String)val;
                break;
            case "pre":
                this.pre = (String)val;
                break;
            case "price":
                this.price = val == null ? 0 : (int)val;
                break;
            case "type":
                this.type = (String)val;
                break;
            case "subscriptionToCryptogramm":
                this.subscriptionToCryptogramm = val;
                break;
            case "subscriptionToOpsub":
                this.subscriptionToOpsub = val;
                break;
            case "subscriptionToRecurrent":
                this.subscriptionToRecurrent = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.cover);
        out.writeObject(this.createdDate);
        out.writeObject(this.days);
        out.writeObject(this.deletedDate);
        out.writeObject(this.modifiedDate);
        out.writeObject(this.months);
        out.writeObject(this.next);
        out.writeObject(this.pre);
        out.writeInt(this.price);
        out.writeObject(this.type);
        out.writeObject(this.subscriptionToCryptogramm);
        out.writeObject(this.subscriptionToOpsub);
        out.writeObject(this.subscriptionToRecurrent);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cover = (Integer)in.readObject();
        this.createdDate = (LocalDateTime)in.readObject();
        this.days = (Integer)in.readObject();
        this.deletedDate = (LocalDateTime)in.readObject();
        this.modifiedDate = (LocalDateTime)in.readObject();
        this.months = (Integer)in.readObject();
        this.next = (String)in.readObject();
        this.pre = (String)in.readObject();
        this.price = in.readInt();
        this.type = (String)in.readObject();
        this.subscriptionToCryptogramm = in.readObject();
        this.subscriptionToOpsub = in.readObject();
        this.subscriptionToRecurrent = in.readObject();
    }

}
