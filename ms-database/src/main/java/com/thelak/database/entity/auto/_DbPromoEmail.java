package com.thelak.database.entity.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.thelak.database.entity.DbPromo;

/**
 * Class _DbPromoEmail was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DbPromoEmail extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ACTIVE = Property.create("active", Boolean.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<DbPromo> EMAIL_TO_PROMO = Property.create("emailToPromo", DbPromo.class);

    protected boolean active;
    protected String email;

    protected Object emailToPromo;

    public void setActive(boolean active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

	public boolean isActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setEmailToPromo(DbPromo emailToPromo) {
        setToOneTarget("emailToPromo", emailToPromo, true);
    }

    public DbPromo getEmailToPromo() {
        return (DbPromo)readProperty("emailToPromo");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "email":
                return this.email;
            case "emailToPromo":
                return this.emailToPromo;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = val == null ? false : (boolean)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "emailToPromo":
                this.emailToPromo = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeBoolean(this.active);
        out.writeObject(this.email);
        out.writeObject(this.emailToPromo);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = in.readBoolean();
        this.email = (String)in.readObject();
        this.emailToPromo = in.readObject();
    }

}
